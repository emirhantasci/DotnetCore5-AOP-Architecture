using Experimental.System.Messaging;
using Newtonsoft.Json;

using SubcribOrderRequeQueue.Helper;
using SubcribOrderRequeQueue.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using VirtualTicket.Agent.Concreat;
using VirtualTicket.Agent.Helper;
using VirtualTicket.Agent.Utility;

namespace SubcribOrderRequeQueue.Concreat
{
    public class Processor
    {
        CancellationTokenSource tokenSource = new CancellationTokenSource();
        CancellationToken token;
     
        List<TempMessage> _temoList = new List<TempMessage>();
        HttpRequestHelper _helper = new HttpRequestHelper();
        CommonHelper _commonHelper;
        Logger _logger;
        int _tryingCountOnError = 3;
        int _customerMaxWaitingTime=10;
        public Processor(CommonHelper CommonHelper)
        {
             token = tokenSource.Token;
            _logger = new Logger();
            _commonHelper = CommonHelper;
            _tryingCountOnError = _commonHelper.GetTryingCountOnError();
            _customerMaxWaitingTime= _commonHelper.GetCustomerMaxWaitingTime();
        }
        public void Start()
        {
            string _machineName = Environment.MachineName;
            LogInfo("Agent Started");
            MessageQueue[] MessageQueues = MessageQueue.GetPrivateQueuesByMachine(_machineName);

            for (int _counter = 0; _counter <= MessageQueues.Length - 1; _counter++)
            {
                MessageQueue messageQueue = MessageQueues[_counter];
               
                LogInfo(messageQueue.Path + " dinlenecek");


                
                Task t = Task.Run(() => Receive(messageQueue), token);
            }
           
        }
        public void Stop()
        {
            tokenSource.Cancel();
           
        }
            private List<Message> ScanForExpiredQueues(MessageQueue messageQueue)
        {

            List<Message> _removedMessages = new List<Message>();
               TimeSpan maxTime = new TimeSpan(0, _customerMaxWaitingTime, 1);
            Message[] _messages = messageQueue.GetAllMessages();

            for (int _counter = 0; _counter <= _messages.Length - 1; _counter++)
            {
                Message _m = _messages[_counter];
                string messageBody = "";
                StreamReader sr = new StreamReader(_m.BodyStream);
                while (sr.Peek() >= 0)
                {
                    messageBody += sr.ReadToEnd();
                }

                LogInfo("messageBody = " + messageBody);
                TicketRequestWithCreateTimeDro _model = GetTicketRequestModel(messageBody);
                TimeSpan dif = (DateTime.Now - _model.CreateTime);
                if (dif > maxTime)
                {   //Sorun bildirme smsi
                    bool _sendSms = SendErorSms(_model.PhoneNo, _model.BranchNo,  _model.ButtonNumber);
                    LogError("İstekte  zaman aşımı oluştu "+ _m.Id);
                    messageQueue.ReceiveById(_m.Id);
                    _removedMessages.Add(_m);
                }
            }
            return _removedMessages;
        }
        public void Receive(MessageQueue messageQueue)
        {
            while (!token.IsCancellationRequested)
            {
                TicketRequestWithCreateTimeDro _model = null;
                Message m = null;
                var messageQueueTransaction = new MessageQueueTransaction();
                try
                {

                    messageQueueTransaction.Begin();
                    m = messageQueue.Receive(messageQueueTransaction);
                    LogInfo("Yeni istek alındı " + m.Id);
                    List<Message> _removedMessage = ScanForExpiredQueues(messageQueue);
                    if (!_removedMessage.Contains(m))
                    {
                        string messageBody = "";
                        StreamReader sr = new StreamReader(m.BodyStream);
                        while (sr.Peek() >= 0)
                        {
                            messageBody += sr.ReadToEnd();
                        }

                        LogInfo("messageBody = " + messageBody);
                        _model = GetTicketRequestModel(messageBody);
                        string _ip = GetIp(_model.BranchNo);
                        Task<RequestResult> _tdHttpResult = SendToTdHttpRequest(_model.BranchNo, _ip, _model.ButtonNumber, _model.CardNo);
                        _tdHttpResult.Wait();
                        if (_tdHttpResult!.Result != null && _tdHttpResult.Result.ResultCode == 0)
                        {
                            bool _sendSms = SendSms(_model.PhoneNo, _model.BranchNo, _tdHttpResult.Result.TicketNumber.ToString(), _model.ButtonNumber);
                            if (_sendSms)
                                CommitTransactiom(messageQueueTransaction);
                            else
                                AbortTransactiom(messageQueueTransaction, m, messageQueue, _model);

                        }
                        else
                            AbortTransactiom(messageQueueTransaction, m, messageQueue, _model);
                    }
                }
                catch (Exception ex)
                {
                    AbortTransactiom(messageQueueTransaction, m, messageQueue, _model);

                }

            }
            if (token.IsCancellationRequested)
            {
                LogInfo("Task cancelled");
            }
        }
        
        private void CommitTransactiom(MessageQueueTransaction Transaction)
        {
            try
            {
                Transaction.Commit();
                LogInfo("Transaction "+ Transaction.Status.ToString());
            }
            catch (Exception ex)
            {
                LogError(ex.ToString());
            }

        }
        private bool  CheckErrorCount(MessageQueue Queue, Message msg, TicketRequestWithCreateTimeDro Model)
        {
            bool _kill =false;
            TempMessage? _tempMsg = _temoList.Where(s => s.MeessageId == msg.Id)?.FirstOrDefault();
            if (_tempMsg != null)
            {
                _tempMsg.TryingCount++;
                if (_tempMsg.TryingCount > _tryingCountOnError)
                {
                    _temoList.Remove(_tempMsg);
                    _kill = true;
                   
                }
            }
            else
            {
                TempMessage _tmpMessage = new TempMessage();
                _tmpMessage.MeessageId = msg.Id;
                _tmpMessage.TryingCount++;
                _temoList.Add(_tmpMessage);
            }
            return _kill;
        }
        private void AbortTransactiom(MessageQueueTransaction Transaction, Message Msg, MessageQueue queue, TicketRequestWithCreateTimeDro Model)
        {
            try
            {
            bool _kill=    CheckErrorCount(queue, Msg, Model);
                if (_kill)
                {
                  
                    Transaction.Commit();
                    if (Model != null)
                        SendErorSms(Model.PhoneNo, Model.BranchNo, Model.ButtonNumber);
                }
                else
                {
                    Transaction.Abort();
                    LogInfo("Transaction Aborted");
                }
            }
            catch (Exception ex)
            {
                LogError(ex.ToString());
            }

        }

        private TicketRequestWithCreateTimeDro GetTicketRequestModel(string MSMQMessage)
        {
            TicketRequestWithCreateTimeDro _model = null;
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(MSMQMessage);
                XmlNodeList xnList = doc.SelectNodes("/string");
                string json = JsonConvert.SerializeXmlNode(doc);
                var charsToRemove = new string[] { @"\" };
                foreach (var c in charsToRemove)
                {
                    json = xnList[0].InnerText.Replace(c, string.Empty);
                }
                _model = JsonConvert.DeserializeObject<TicketRequestWithCreateTimeDro>(json);
            }
            catch (Exception ex)
            {
                LogError(ex.ToString());
            }
            return _model;
        }
        public async Task<RequestResult> SendToTdHttpRequest(string BranchNo, string Ip,string ButtonNo,string CardNo)
        {
            string _result = "";
            RequestResult _tdHttpResult = null;
            try
            {
                string _deviceId = "2001";
                _result = await _helper.SendRequesAsyct(BranchNo, Ip + ":90/td", "RQSTCK", "&DeviceId="+ _deviceId + "&ButtonNumber="+ButtonNo+ "&CardNo="+CardNo+"&PhysicalButtonNo="+ ButtonNo);
                XmlDocument _doc = _helper.StringToXml("1", _result);
                RequestResult _return = _helper.ParseXmlDoc(_doc, "RQSTCK");
                if (_return.ResultCode == 0 && _return.ErrorMsg == 0)
                {
                    _tdHttpResult = _return;
                }
                LogInfo("TdHttpResult = " + _return.ResultCode);
            }
            catch (Exception ex)
            {
                LogError(ex.ToString());
            }
            LogInfo("TdHttpResult = " + _result);
            return _tdHttpResult;
        }

        public  string GetIp(string BranchCode)
        {
            LogInfo("Ip = " + "127.0.0.1");
            return "127.0.0.1";
        }
        public bool SendSms(string PhoneNumber,string BranchCode, string TicketNumber,string ButtonNo)
        {
            LogInfo("SendSms = Bankamzın "+ BranchCode+ " nolu şubesinde buton no "+ ButtonNo +" için üretilen bilet numarası "+ TicketNumber+" dir. "+ PhoneNumber +" numarasına SMS olarak yollanmıştır.");
            return true;
        }
        public bool SendErorSms(string PhoneNumber, string BranchCode,  string ButtonNo)
        {
            LogInfo("SendSms = Bankamzın " + BranchCode + " nolu şubesinde buton no " + ButtonNo + " için yapılan işlemde hata oluştu");
            return true;
        }
        private void LogInfo(string Message)
        {
          
            _commonHelper.LogInfo(Message); ;
        }
        private void LogError(string Message)
        {
            _commonHelper.LogError(Message); ;
        }
        private void LogDebug(string Message)
        {
            _commonHelper.LogDebug(Message); ;
        }




    }
}
